# This is a basic workflow to help you get started with Actions

name: Commands triggered by typing PR comment

# Controls when the action will run. 
on:
  issue_comment:
    types: [created]

jobs:
  time:
    name: Time how fast the script executes the test folder
    if: ${{ github.event.issue.pull_request && github.event.comment.body == '!time' }}
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - run: |
          echo Comment message:
          echo ${{ github.event.comment.body }}
      - name: Download and unzip assets
        run: |
          cd scripts/gdrive/
          ./gdl.bash https://drive.google.com/drive/folders/1UEgWofLWzaNGACavUlvy3-h3Qx1oledE?usp=sharing
          cd GooglePhotosTakeoutHelper-Assets/
          unzip sample-takeout.zip
      - name: Run the script 30 times
        id: run-30-times
        run: |
          pip3 install -r requirements.txt
          FOLDER=scripts/gdrive/GooglePhotosTakeoutHelper-Assets/
          START=`date +%s`
          for i in {1..30} ; do
            python3 google_photos_takeout_helper/__main__.py -i $FOLDER/Takeout/ -o $FOLDER/output$i/ > log$i.txt
          done
          END=`date +%s`
          RUNTIME=$((END-START)) 
          echo "::set-output name=seconds::$RUNTIME"
          echo "::set-output name=seconds-per-one::$(bc -l <<< "scale=4; $FULL_TIME/30")"
          FILE_COUNT=$(find $FOLDER/Takeout/ -type f | wc -l)
          echo "::set-output name=ms-per-file::$(bc -l <<< "scale=4; $FULL_TIME/30/$FILE_COUNT *1000)"
      - name: Prepare message
        id: prepare-message
        run: |
          FULL=${{ steps.run-30-times.outputs.seconds }}
          ONE=${{ steps.run-30-times.outputs.seconds-per-one }}
          FILE=${{ steps.run-30-times.outputs.seconds-per-file }}
          echo "::set-output name=message::30 times $FULL_TIME seconds, 1 time $ONE seconds, **$FILE ms per file**"
      - name: Comment the time on PR
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '${{ steps.prepare-message.outputs.message }}'
            })
